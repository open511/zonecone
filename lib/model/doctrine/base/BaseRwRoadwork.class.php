<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('RwRoadwork', 'doctrine');

/**
 * BaseRwRoadwork
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $source_id
 * @property string $name
 * @property string $raw_description
 * @property string $road_name
 * @property timestamp $start_date
 * @property timestamp $end_date
 * @property string $url
 * @property string $restriction
 * @property boolean $is_active
 * @property boolean $update_flag
 * @property blob $geom
 * @property integer $severity
 * @property string $start_date_text
 * @property string $end_date_text
 * @property string $description
 * @property string $direction
 * @property string $workaround
 * @property RwSource $RwSource
 * @property RwToRoute $RwToRoute
 * @property RwMtqExtention $RwMtqExtention
 * @property Doctrine_Collection $RwUserRoute
 * @property Doctrine_Collection $RwNotification
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getSourceId()        Returns the current record's "source_id" value
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getRawDescription()  Returns the current record's "raw_description" value
 * @method string              getRoadName()        Returns the current record's "road_name" value
 * @method timestamp           getStartDate()       Returns the current record's "start_date" value
 * @method timestamp           getEndDate()         Returns the current record's "end_date" value
 * @method string              getUrl()             Returns the current record's "url" value
 * @method string              getRestriction()     Returns the current record's "restriction" value
 * @method boolean             getIsActive()        Returns the current record's "is_active" value
 * @method boolean             getUpdateFlag()      Returns the current record's "update_flag" value
 * @method blob                getGeom()            Returns the current record's "geom" value
 * @method integer             getSeverity()        Returns the current record's "severity" value
 * @method string              getStartDateText()   Returns the current record's "start_date_text" value
 * @method string              getEndDateText()     Returns the current record's "end_date_text" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method string              getDirection()       Returns the current record's "direction" value
 * @method string              getWorkaround()      Returns the current record's "workaround" value
 * @method RwSource            getRwSource()        Returns the current record's "RwSource" value
 * @method RwToRoute           getRwToRoute()       Returns the current record's "RwToRoute" value
 * @method RwMtqExtention      getRwMtqExtention()  Returns the current record's "RwMtqExtention" value
 * @method Doctrine_Collection getRwUserRoute()     Returns the current record's "RwUserRoute" collection
 * @method Doctrine_Collection getRwNotification()  Returns the current record's "RwNotification" collection
 * @method RwRoadwork          setId()              Sets the current record's "id" value
 * @method RwRoadwork          setSourceId()        Sets the current record's "source_id" value
 * @method RwRoadwork          setName()            Sets the current record's "name" value
 * @method RwRoadwork          setRawDescription()  Sets the current record's "raw_description" value
 * @method RwRoadwork          setRoadName()        Sets the current record's "road_name" value
 * @method RwRoadwork          setStartDate()       Sets the current record's "start_date" value
 * @method RwRoadwork          setEndDate()         Sets the current record's "end_date" value
 * @method RwRoadwork          setUrl()             Sets the current record's "url" value
 * @method RwRoadwork          setRestriction()     Sets the current record's "restriction" value
 * @method RwRoadwork          setIsActive()        Sets the current record's "is_active" value
 * @method RwRoadwork          setUpdateFlag()      Sets the current record's "update_flag" value
 * @method RwRoadwork          setGeom()            Sets the current record's "geom" value
 * @method RwRoadwork          setSeverity()        Sets the current record's "severity" value
 * @method RwRoadwork          setStartDateText()   Sets the current record's "start_date_text" value
 * @method RwRoadwork          setEndDateText()     Sets the current record's "end_date_text" value
 * @method RwRoadwork          setDescription()     Sets the current record's "description" value
 * @method RwRoadwork          setDirection()       Sets the current record's "direction" value
 * @method RwRoadwork          setWorkaround()      Sets the current record's "workaround" value
 * @method RwRoadwork          setRwSource()        Sets the current record's "RwSource" value
 * @method RwRoadwork          setRwToRoute()       Sets the current record's "RwToRoute" value
 * @method RwRoadwork          setRwMtqExtention()  Sets the current record's "RwMtqExtention" value
 * @method RwRoadwork          setRwUserRoute()     Sets the current record's "RwUserRoute" collection
 * @method RwRoadwork          setRwNotification()  Sets the current record's "RwNotification" collection
 * 
 * @package    roadwork
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRwRoadwork extends sfMapFishRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('rw_roadwork');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'sequence' => 'rw_roadwork_id',
             'length' => 8,
             ));
        $this->hasColumn('source_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('raw_description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('road_name', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('start_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('end_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 25,
             ));
        $this->hasColumn('url', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('restriction', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('is_active', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('update_flag', 'boolean', 1, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 1,
             ));
        $this->hasColumn('geom', 'blob', null, array(
             'type' => 'blob',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => true,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('severity', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => 4,
             ));
        $this->hasColumn('start_date_text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('end_date_text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('direction', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
        $this->hasColumn('workaround', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'notnull' => false,
             'primary' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('RwSource', array(
             'local' => 'source_id',
             'foreign' => 'id'));

        $this->hasOne('RwToRoute', array(
             'local' => 'id',
             'foreign' => 'rw_id'));

        $this->hasOne('RwMtqExtention', array(
             'local' => 'id',
             'foreign' => 'rw_id'));

        $this->hasMany('RwUserRoute', array(
             'local' => 'geom',
             'foreign' => 'geom'));

        $this->hasMany('RwNotification', array(
             'local' => 'id',
             'foreign' => 'rw_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}